[gd_scene load_steps=2 format=3]

[sub_resource type="GDScript" id="GDScript_main"]
script/source = """
# Generated by Vector AI
extends Node2D

# --- Constants ---
const PLAYER_SPEED = 200.0
const PLAYER_JUMP_FORCE = -400.0
const GRAVITY = 800.0
const WALL_SLIDE_SPEED = 50.0
const WALL_JUMP_FORCE = Vector2(300.0, -350.0) # x is horizontal push, y is vertical
const WALL_JUMP_INPUT_LOCK_TIME = 0.2 # Time to ignore horizontal input after wall jump

# --- Variables ---
var player: CharacterBody2D
var player_velocity = Vector2.ZERO
var wall_jump_timer = 0.0 # Timer to lock input after wall jump

# --- Ready Function ---
func _ready():
	# Ensure input actions exist (configure these in Project Settings -> Input Map)
	# For this script to work, you need actions:
	# "move_left" (e.g., Left Arrow, A)
	# "move_right" (e.g., Right Arrow, D)
	# "jump" (e.g., Space, W)
	# If they don't exist, the game won't respond to input.

	# Create Player
	player = CharacterBody2D.new()
	player.name = "Player"
	player.position = Vector2(100, 100) # Starting position
	add_child(player)

	# Player Visual
	var player_visual = ColorRect.new()
	player_visual.color = Color.html("#4287f5")
	player_visual.size = Vector2(30, 50)
	player_visual.pivot_offset = player_visual.size / 2.0
	player_visual.position = -player_visual.size / 2.0 # Center pivot
	player.add_child(player_visual)

	# Player Collision
	var player_collision_shape = CollisionShape2D.new()
	var player_shape = RectangleShape2D.new()
	player_shape.size = player_visual.size
	player_collision_shape.shape = player_shape
	player.add_child(player_collision_shape)

	# Create Level
	create_platform(Vector2(0, 300), Vector2(800, 50)) # Ground
	create_platform(Vector2(300, 200), Vector2(200, 30)) # Platform 1
	create_platform(Vector2(600, 100), Vector2(150, 30)) # Platform 2
	create_platform(Vector2(750, 0), Vector2(50, 100)) # Wall

	# Set gravity for the player (CharacterBody2D)
	player.set_gravity_scale(0.0) # We handle gravity manually

# --- Physics Process ---
func _physics_process(delta):
	# Apply gravity
	player_velocity.y += GRAVITY * delta

	# --- Handle Input ---
	var input_axis = Input.get_axis("move_left", "move_right")

	# Wall Jump Input Lock
	if wall_jump_timer > 0:
		wall_jump_timer -= delta
		input_axis = 0 # Ignore horizontal input during lock

	# Horizontal Movement
	if wall_jump_timer <= 0: # Only apply horizontal input if not locked
		player_velocity.x = input_axis * PLAYER_SPEED

	# Jumping / Wall Jumping
	if Input.is_action_just_pressed("jump"):
		if player.is_on_floor():
			player_velocity.y = PLAYER_JUMP_FORCE
		elif player.is_on_wall():
			var wall_normal = player.get_wall_normal()
			player_velocity.y = WALL_JUMP_FORCE.y
			player_velocity.x = wall_normal.x * WALL_JUMP_FORCE.x
			wall_jump_timer = WALL_JUMP_INPUT_LOCK_TIME # Start input lock

	# Wall Sliding
	if player.is_on_wall() and not player.is_on_floor():
		# Limit vertical speed if sliding down
		if player_velocity.y > WALL_SLIDE_SPEED:
			player_velocity.y = WALL_SLIDE_SPEED

	# Apply velocity and move
	player.velocity = player_velocity
	player.move_and_slide()

	# Update player_velocity based on move_and_slide results (important for sliding)
	player_velocity = player.velocity


# --- Helper Function to Create Platforms ---
func create_platform(position: Vector2, size: Vector2):
	var platform = StaticBody2D.new()
	platform.position = position
	add_child(platform)

	# Platform Visual
	var platform_visual = ColorRect.new()
	platform_visual.color = Color.html("#808080")
	platform_visual.size = size
	platform_visual.position = Vector2.ZERO # Relative to StaticBody2D origin
	platform.add_child(platform_visual)

	# Platform Collision
	var platform_collision_shape = CollisionShape2D.new()
	var platform_shape = RectangleShape2D.new()
	platform_shape.size = size
	platform_collision_shape.shape = platform_shape
	platform.add_child(platform_collision_shape)

"""

[node name="Main" type="Node2D"]
script = SubResource("GDScript_main")
