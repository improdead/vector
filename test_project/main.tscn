[gd_scene load_steps=2 format=3 uid="uid://c81396346744056abc"]

[sub_resource type="GDScript" id="GDScript_2462143"]
script/source = """
# Generated by Vector AI
extends Node2D

# Constants for game parameters
const TILE_SIZE = 32; # Size of each tile in pixels;
const MAZE_WIDTH = 15; # Number of horizontal cells in the maze grid (affects complexity);
const MAZE_HEIGHT = 10; # Number of vertical cells in the maze grid (affects complexity);
const WALL_TILE = 0; # Identifier for wall cells in the grid;
const FLOOR_TILE = 1; # Identifier for floor cells in the grid;

const PLAYER_SPEED = 200; # Movement speed of the player;

# Variables to hold game nodes
var tile_map: TileMap;
var player: CharacterBody2D;
var goal_area: Area2D;
var win_label: Label;

# 2D array representing the maze layout.
# The size will be (MAZE_WIDTH * 2 + 1) x (MAZE_HEIGHT * 2 + 1)
# to accommodate walls between passages.
var maze_grid = []

func _ready():
	# Ensure random number generator is seeded
	randomize();

	# Initialize the maze grid with walls
	_initialize_maze_grid();

	# Generate the maze structure using recursive backtracking
	# Start carving from a cell within the grid, e.g., (1, 1)
	_generate_maze(1, 1);

	# Create the TileMap node
	tile_map = TileMap.new();
	tile_map.name = \"TileMap\";
	# Position the tilemap at the origin
	tile_map.position = Vector2(0, 0);
	add_child(tile_map);

	# Create the TileSet for the TileMap
	var tile_set = TileSet.new();
	tile_map.tile_set = tile_set;

	# Programmatically create textures for tiles (wall and floor)
	# Create an image that will serve as our texture atlas
	var combined_image = Image.new();
	combined_image.create(TILE_SIZE * 2, TILE_SIZE, false, Image.FORMAT_RGBA8);

	# Create wall texture part
	var wall_image = Image.new();
	wall_image.create(TILE_SIZE, TILE_SIZE, false, Image.FORMAT_RGBA8);
	wall_image.fill(Color.DARKBLUE); # Wall color;
	combined_image.blit_rect(wall_image, Rect2(0, 0, TILE_SIZE, TILE_SIZE), Vector2(0, 0));

	# Create floor texture part
	var floor_image = Image.new();
	floor_image.create(TILE_SIZE, TILE_SIZE, false, Image.FORMAT_RGBA8);
	floor_image.fill(Color.LIGHTGRAY); # Floor color;
	combined_image.blit_rect(floor_image, Rect2(0, 0, TILE_SIZE, TILE_SIZE), Vector2(TILE_SIZE, 0));

	# Create an ImageTexture from the combined image
	var combined_texture = ImageTexture.create_from_image(combined_image);

	# Create an AtlasSource for the TileSet
	var atlas = TileSetAtlasSource.new();
	atlas.texture = combined_texture;
	atlas.region_size = Vector2(TILE_SIZE, TILE_SIZE);
	# The texture_region_size defines the whole area of the texture used
	atlas.texture_region_size = Vector2(TILE_SIZE * 2, TILE_SIZE);

	# Add tiles to the AtlasSource
	# Wall tile (at coordinates 0, 0 in the atlas)
	var wall_coords = Vector2i(0, 0);
	atlas.create_tile(wall_coords);
	var wall_tile_data = atlas.get_tile_data(wall_coords, 0);
	if wall_tile_data:
		wall_tile_data.set_texture_origin(Vector2i(0, 0));
		# Add collision shape to the wall tile
		wall_tile_data.set_collision_history_size(1); # Set history size for collision layer 0;
		wall_tile_data.add_collision_polygon(0, PackedVector2Array([Vector2(0, 0), Vector2(TILE_SIZE, 0), Vector2(TILE_SIZE, TILE_SIZE), Vector2(0, TILE_SIZE)]));

	# Floor tile (at coordinates 1, 0 in the atlas)
	var floor_coords = Vector2i(1, 0);
	atlas.create_tile(floor_coords);
	var floor_tile_data = atlas.get_tile_data(floor_coords, 0);
	if floor_tile_data:
		floor_tile_data.set_texture_origin(Vector2i(0, 0));

	# Add the AtlasSource to the TileSet
	tile_set.add_source(atlas, 0); # Source ID 0;

	# Populate the TileMap based on the generated maze grid
	var map_width = MAZE_WIDTH * 2 + 1;
	var map_height = MAZE_HEIGHT * 2 + 1;
	for x in range(map_width):
		for y in range(map_height):
			if maze_grid[x][y] == WALL_TILE:
				# Set cell using source ID (0), tile coordinates in atlas (wall_coords)
				tile_map.set_cell(0,;

"""

[node name="Main" type="Node2D"]
script = SubResource("GDScript_2462143")
