@tool
extends Node

# Direct Game Generator
# This script provides direct game generation capabilities for Vector AI
# It creates complete games by directly writing scene and script files

# Reference to the direct file editor
var file_editor

func _ready():
	print("Direct Game Generator initialized")

	# Get reference to the direct file editor
	file_editor = get_parent().get_node("DirectFileEditor")
	if not file_editor:
		push_error("Vector AI: DirectFileEditor not found!")

# Create a simple maze game
func create_maze_game(path_prefix = "res://"):
	var main_scene_path = path_prefix + "main.tscn"
	var main_script_path = path_prefix + "main.gd"

	# Create the main script
	var script_content = """extends Node2D

# Maze Game - Generated by Vector AI

var score = 0
var total_coins = 0

func _ready():
	# Count total coins in the level
	total_coins = get_tree().get_nodes_in_group("coins").size()
	$UI/ScoreLabel.text = "Score: 0/" + str(total_coins)

func collect_coin():
	score += 1
	$UI/ScoreLabel.text = "Score: " + str(score) + "/" + str(total_coins)

	if score >= total_coins:
		$UI/WinLabel.visible = true
"""

	# Create the player script
	var player_script_path = path_prefix + "player.gd"
	var player_script_content = """extends CharacterBody2D

# Player script - Generated by Vector AI

const SPEED = 300.0

func _physics_process(delta):
	# Get input direction
	var direction = Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")

	# Set velocity
	velocity = direction * SPEED

	# Move and slide
	move_and_slide()

	# Check for coin collisions
	for i in get_slide_collision_count():
		var collision = get_slide_collision(i)
		var collider = collision.get_collider()

		if collider.is_in_group("coins"):
			collider.queue_free()
			get_parent().collect_coin()
"""

	# Create the coin script
	var coin_script_path = path_prefix + "coin.gd"
	var coin_script_content = """extends Area2D

# Coin script - Generated by Vector AI

func _ready():
	# Add to coins group
	add_to_group("coins")
"""

	# Create the scene content
	var scene_content = """[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://main.gd" id="1_main"]
[ext_resource type="Script" path="res://player.gd" id="2_player"]
[ext_resource type="Script" path="res://coin.gd" id="3_coin"]

[sub_resource type="CircleShape2D" id="CircleShape2D_player"]
radius = 30.0

[sub_resource type="CircleShape2D" id="CircleShape2D_coin"]
radius = 20.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_wall"]
size = Vector2(40, 400)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_wall_h"]
size = Vector2(400, 40)

[node name="Main" type="Node2D"]
script = ExtResource("1_main")

[node name="Player" type="CharacterBody2D" parent="."]
position = Vector2(100, 100)
collision_mask = 3
script = ExtResource("2_player")

[node name="Sprite2D" type="Sprite2D" parent="Player"]
modulate = Color(0.0784314, 0.52549, 0.933333, 1)
scale = Vector2(0.5, 0.5)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Player"]
shape = SubResource("CircleShape2D_player")

[node name="Camera2D" type="Camera2D" parent="Player"]
zoom = Vector2(0.8, 0.8)

[node name="Walls" type="Node2D" parent="."]

[node name="Wall1" type="StaticBody2D" parent="Walls"]
position = Vector2(0, 200)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall1"]
offset_left = -20.0
offset_top = -200.0
offset_right = 20.0
offset_bottom = 200.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall1"]
shape = SubResource("RectangleShape2D_wall")

[node name="Wall2" type="StaticBody2D" parent="Walls"]
position = Vector2(800, 200)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall2"]
offset_left = -20.0
offset_top = -200.0
offset_right = 20.0
offset_bottom = 200.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall2"]
shape = SubResource("RectangleShape2D_wall")

[node name="Wall3" type="StaticBody2D" parent="Walls"]
position = Vector2(400, 0)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall3"]
offset_left = -200.0
offset_top = -20.0
offset_right = 200.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall3"]
shape = SubResource("RectangleShape2D_wall_h")

[node name="Wall4" type="StaticBody2D" parent="Walls"]
position = Vector2(400, 400)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall4"]
offset_left = -200.0
offset_top = -20.0
offset_right = 200.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall4"]
shape = SubResource("RectangleShape2D_wall_h")

[node name="Wall5" type="StaticBody2D" parent="Walls"]
position = Vector2(400, 200)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall5"]
offset_left = -100.0
offset_top = -20.0
offset_right = 100.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall5"]
position = Vector2(0, 0)
shape = SubResource("RectangleShape2D_wall_h")

[node name="Wall6" type="StaticBody2D" parent="Walls"]
position = Vector2(200, 300)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall6"]
offset_left = -20.0
offset_top = -100.0
offset_right = 20.0
offset_bottom = 100.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall6"]
position = Vector2(0, 0)
rotation = 1.5708
shape = SubResource("RectangleShape2D_wall_h")

[node name="Coins" type="Node2D" parent="."]

[node name="Coin1" type="Area2D" parent="Coins"]
position = Vector2(300, 100)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin1"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin1"]
shape = SubResource("CircleShape2D_coin")

[node name="Coin2" type="Area2D" parent="Coins"]
position = Vector2(600, 100)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin2"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin2"]
shape = SubResource("CircleShape2D_coin")

[node name="Coin3" type="Area2D" parent="Coins"]
position = Vector2(600, 300)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin3"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin3"]
shape = SubResource("CircleShape2D_coin")

[node name="Coin4" type="Area2D" parent="Coins"]
position = Vector2(100, 300)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin4"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin4"]
shape = SubResource("CircleShape2D_coin")

[node name="UI" type="CanvasLayer" parent="."]

[node name="ScoreLabel" type="Label" parent="UI"]
offset_left = 20.0
offset_top = 20.0
offset_right = 200.0
offset_bottom = 60.0
theme_override_font_sizes/font_size = 24
text = "Score: 0/4"

[node name="WinLabel" type="Label" parent="UI"]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -200.0
offset_top = -50.0
offset_right = 200.0
offset_bottom = 50.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 48
text = "You Win!"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Instructions" type="Label" parent="UI"]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -300.0
offset_top = -60.0
offset_right = 300.0
offset_bottom = -20.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 18
text = "Use arrow keys or WASD to move. Collect all coins to win!"
horizontal_alignment = 1
vertical_alignment = 1
"""

	# Create all the files
	var script_result = file_editor.create_script(main_script_path, script_content)
	if not script_result.success:
		return {
			"success": false,
			"message": "Failed to create main script: " + script_result.message
		}

	var player_script_result = file_editor.create_script(player_script_path, player_script_content)
	if not player_script_result.success:
		return {
			"success": false,
			"message": "Failed to create player script: " + player_script_result.message
		}

	var coin_script_result = file_editor.create_script(coin_script_path, coin_script_content)
	if not coin_script_result.success:
		return {
			"success": false,
			"message": "Failed to create coin script: " + coin_script_result.message
		}

	var scene_result = file_editor.create_scene(main_scene_path, scene_content)
	if not scene_result.success:
		return {
			"success": false,
			"message": "Failed to create main scene: " + scene_result.message
		}

	return {
		"success": true,
		"message": "Maze game created successfully!",
		"main_scene_path": main_scene_path
	}

# Create a simple platformer game
func create_platformer_game(path_prefix = "res://"):
	var main_scene_path = path_prefix + "main.tscn"
	var main_script_path = path_prefix + "main.gd"

	# Create the main script
	var script_content = """extends Node2D

# Platformer Game - Generated by Vector AI

var score = 0
var total_coins = 0

func _ready():
	# Count total coins in the level
	total_coins = get_tree().get_nodes_in_group("coins").size()
	$UI/ScoreLabel.text = "Score: 0/" + str(total_coins)

func collect_coin():
	score += 1
	$UI/ScoreLabel.text = "Score: " + str(score) + "/" + str(total_coins)

	if score >= total_coins:
		$UI/WinLabel.visible = true
"""

	# Create the player script
	var player_script_path = path_prefix + "player.gd"
	var player_script_content = """extends CharacterBody2D

# Player script - Generated by Vector AI

const SPEED = 300.0
const JUMP_VELOCITY = -600.0

# Get the gravity from the project settings to be synced with RigidBody nodes
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")

func _physics_process(delta):
	# Add the gravity
	if not is_on_floor():
		velocity.y += gravity * delta

	# Handle Jump
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration
	var direction = Input.get_axis("ui_left", "ui_right")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()

	# Check for coin collisions
	for i in get_slide_collision_count():
		var collision = get_slide_collision(i)
		var collider = collision.get_collider()

		if collider.is_in_group("coins"):
			collider.queue_free()
			get_parent().collect_coin()
"""

	# Create the coin script
	var coin_script_path = path_prefix + "coin.gd"
	var coin_script_content = """extends Area2D

# Coin script - Generated by Vector AI

func _ready():
	# Add to coins group
	add_to_group("coins")
"""

	# Create the scene content
	var scene_content = """[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://main.gd" id="1_main"]
[ext_resource type="Script" path="res://player.gd" id="2_player"]
[ext_resource type="Script" path="res://coin.gd" id="3_coin"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_player"]
size = Vector2(40, 80)

[sub_resource type="CircleShape2D" id="CircleShape2D_coin"]
radius = 20.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_platform"]
size = Vector2(400, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_wall"]
size = Vector2(40, 600)

[node name="Main" type="Node2D"]
script = ExtResource("1_main")

[node name="Player" type="CharacterBody2D" parent="."]
position = Vector2(100, 100)
collision_mask = 3
script = ExtResource("2_player")

[node name="Sprite2D" type="Sprite2D" parent="Player"]
modulate = Color(0.0784314, 0.52549, 0.933333, 1)
scale = Vector2(0.4, 0.8)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Player"]
shape = SubResource("RectangleShape2D_player")

[node name="Camera2D" type="Camera2D" parent="Player"]
zoom = Vector2(0.8, 0.8)

[node name="Platforms" type="Node2D" parent="."]

[node name="Platform1" type="StaticBody2D" parent="Platforms"]
position = Vector2(400, 400)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Platforms/Platform1"]
offset_left = -200.0
offset_top = -20.0
offset_right = 200.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Platforms/Platform1"]
shape = SubResource("RectangleShape2D_platform")

[node name="Platform2" type="StaticBody2D" parent="Platforms"]
position = Vector2(700, 300)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Platforms/Platform2"]
offset_left = -200.0
offset_top = -20.0
offset_right = 200.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Platforms/Platform2"]
shape = SubResource("RectangleShape2D_platform")

[node name="Platform3" type="StaticBody2D" parent="Platforms"]
position = Vector2(200, 200)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Platforms/Platform3"]
offset_left = -200.0
offset_top = -20.0
offset_right = 200.0
offset_bottom = 20.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Platforms/Platform3"]
shape = SubResource("RectangleShape2D_platform")

[node name="Walls" type="Node2D" parent="."]

[node name="Wall1" type="StaticBody2D" parent="Walls"]
position = Vector2(0, 300)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall1"]
offset_left = -20.0
offset_top = -300.0
offset_right = 20.0
offset_bottom = 300.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall1"]
shape = SubResource("RectangleShape2D_wall")

[node name="Wall2" type="StaticBody2D" parent="Walls"]
position = Vector2(1000, 300)
collision_layer = 2

[node name="ColorRect" type="ColorRect" parent="Walls/Wall2"]
offset_left = -20.0
offset_top = -300.0
offset_right = 20.0
offset_bottom = 300.0
color = Color(0.301961, 0.301961, 0.301961, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Walls/Wall2"]
shape = SubResource("RectangleShape2D_wall")

[node name="Coins" type="Node2D" parent="."]

[node name="Coin1" type="Area2D" parent="Coins"]
position = Vector2(300, 100)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin1"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin1"]
shape = SubResource("CircleShape2D_coin")

[node name="Coin2" type="Area2D" parent="Coins"]
position = Vector2(700, 200)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin2"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin2"]
shape = SubResource("CircleShape2D_coin")

[node name="Coin3" type="Area2D" parent="Coins"]
position = Vector2(500, 300)
collision_layer = 4
script = ExtResource("3_coin")

[node name="Sprite2D" type="Sprite2D" parent="Coins/Coin3"]
modulate = Color(0.988235, 0.839216, 0, 1)
scale = Vector2(0.3, 0.3)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coins/Coin3"]
shape = SubResource("CircleShape2D_coin")

[node name="UI" type="CanvasLayer" parent="."]

[node name="ScoreLabel" type="Label" parent="UI"]
offset_left = 20.0
offset_top = 20.0
offset_right = 200.0
offset_bottom = 60.0
theme_override_font_sizes/font_size = 24
text = "Score: 0/3"

[node name="WinLabel" type="Label" parent="UI"]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -200.0
offset_top = -50.0
offset_right = 200.0
offset_bottom = 50.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 48
text = "You Win!"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Instructions" type="Label" parent="UI"]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -300.0
offset_top = -60.0
offset_right = 300.0
offset_bottom = -20.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 18
text = "Use arrow keys to move, Space to jump. Collect all coins to win!"
horizontal_alignment = 1
vertical_alignment = 1
"""

	# Create all the files
	var script_result = file_editor.create_script(main_script_path, script_content)
	if not script_result.success:
		return {
			"success": false,
			"message": "Failed to create main script: " + script_result.message
		}

	var player_script_result = file_editor.create_script(player_script_path, player_script_content)
	if not player_script_result.success:
		return {
			"success": false,
			"message": "Failed to create player script: " + player_script_result.message
		}

	var coin_script_result = file_editor.create_script(coin_script_path, coin_script_content)
	if not coin_script_result.success:
		return {
			"success": false,
			"message": "Failed to create coin script: " + coin_script_result.message
		}

	var scene_result = file_editor.create_scene(main_scene_path, scene_content)
	if not scene_result.success:
		return {
			"success": false,
			"message": "Failed to create main scene: " + scene_result.message
		}

	return {
		"success": true,
		"message": "Platformer game created successfully!",
		"main_scene_path": main_scene_path
	}

# Create a game based on a description
func create_game_from_description(description, path_prefix = "res://"):
	# Analyze the description to determine what kind of game to create
	description = description.to_lower()

	# Always use main.tscn as the default path
	# This is the standard entry point for Godot games
	var base_path = "res://main"

	# Check if main.tscn already exists
	if FileAccess.file_exists("res://main.tscn"):
		print("Note: Overwriting existing main.tscn file.")
		print("The existing main.tscn will be replaced with the new game.")
		print("If you want to keep your existing main.tscn, please rename it first.")

	# Create the game based on the description
	if "maze" in description or "collect" in description:
		return create_maze_game(base_path)
	elif "platform" in description or "jump" in description or "parkour" in description:
		return create_platformer_game(base_path)
	else:
		# Default to maze game
		return create_maze_game(base_path)
